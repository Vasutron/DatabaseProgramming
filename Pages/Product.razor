@page "/product"

<h3>Product!</h3>

<button @onclick="OpenForm" class="btn btn-primary">
    New Record
</button>

<table class="mt-3 table table-bordered table-striped">
    <thead>
        <tr class="bg-primary text-white text-center">
            <th>ID</th>
            <th>Barcode</th>
            <th>Name</th>
            <th>Price</th>
            <th width="80px">Edit</th>
            <th width="80px">Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (ProductModel item in products)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Barcode</td>
                <td>@item.Name</td>
                <td>@item.Price</td>
                <td class="text-center">
                    <button @onclick="e => Edit(item)" class="btn btn-sm btn-warning">
                        Edit
                    </button>
                </td>
                <td class="text-center">
                    <button @onclick="e => Remove(item)" class="btn btn-sm btn-danger">
                        Delete
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<Modal @ref="modal" Title="ข้อมูลสินค้า">
    <BodyTemplate>
        <div class="mb-3">
            <div>Barcode</div>
            <input @bind="productModel.Barcode" class="form-control" />
        </div>
        <div class="mb-3">
            <div>Name</div>
            <input @bind="productModel.Name" class="form-control" />
        </div>
        <div class="mb-3">
            <div>Price</div>
            <input @bind="productModel.Price" class="form-control" />
        </div>

    </BodyTemplate>
    <FooterTemplate>

        <button @onclick="Save" class="btn btn-primary">
            Save
        </button>
        <button @onclick="CloseForm" class="btn btn-secondary">
            Cancel
        </button>
    </FooterTemplate>
</Modal>



@code {
    private Modal? modal;

    List<ProductModel> products = new List<ProductModel>();
    ProductModel productModel = new ProductModel();
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            FetchData();
        }
    }

    async Task OpenForm()
    {
        await modal!.ShowAsync();
    }
    void FetchData()
    {
        try
        {
            products.Clear();
            using Npgsql.NpgsqlConnection conn = new MyConnect().GetConnection();
            using Npgsql.NpgsqlCommand cmd = conn!.CreateCommand();
            cmd.CommandText = "SELECT * FROM tb_product ORDER BY id DESC";

            Npgsql.NpgsqlDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
            {
                products.Add(new ProductModel
                    {
                        Id = Convert.ToInt32(reader["id"]),
                        Barcode = reader["barcode"].ToString(),
                        Name = reader["name"].ToString(),
                        Price = Convert.ToInt32(reader["price"])
                    });
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    async Task CloseForm()
    {

        productModel.Id = 0;
        productModel.Barcode = "";
        productModel.Name = "";
        productModel.Price = 0;

        await modal!.HideAsync();
    }
    async Task Save()
    {
        try
        {
            using Npgsql.NpgsqlConnection conn = new MyConnect().GetConnection();
            using Npgsql.NpgsqlCommand cmd = conn!.CreateCommand();
            if (productModel.Id > 0)
            {
                cmd.CommandText = "UPDATE tb_product SET barcode = @barcode, name = @name, price = @price WHERE id = @id";
                cmd.Parameters.AddWithValue("id", productModel.Id);
            }
            else
            {
                cmd.CommandText = "INSERT INTO tb_product (barcode, name, price) VALUES (@barcode, @name, @price)";
            }
            cmd.Parameters.AddWithValue("barcode", productModel.Barcode!);
            cmd.Parameters.AddWithValue("name", productModel.Name!);
            cmd.Parameters.AddWithValue("price", productModel.Price);

            if (cmd.ExecuteNonQuery() != 0)
            {
                FetchData();
                await CloseForm();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("void Save : " + ex.Message);
        }
    }
    async Task Edit(ProductModel item)
    {
        await OpenForm();
        productModel = item;
    }

    void Remove(ProductModel item)
    {
        try
        {
            using Npgsql.NpgsqlConnection conn = new MyConnect().GetConnection();
            using Npgsql.NpgsqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = "DELETE FROM tb_product WHERE id = @id";
            cmd.Parameters.AddWithValue("id", item.Id);

            if (cmd.ExecuteNonQuery() != 0)
            {
                FetchData(); // Refresh data เพื่อแสดงข้อมูลล่าสุด
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("void Remove : " + ex.Message);
        }
    }
}
